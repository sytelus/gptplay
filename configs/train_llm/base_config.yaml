# base config is designed for GPT2/OpenWebText with NanoGPT defaults
general:
  device_type: 'cuda'            # auto select if blank or cpu, cuda
  backend: 'nccl'       # nccl, gloo, mpi, horovod)
  torch_compile: true # will not compile if Python > 3.11, torch < 2.1.0 or Windows
  seed: 42
  dtype: 'bfloat16'         # float32, float16, bfloat16
  enable_distributed: true
  out_dir: '~/out_dir/train_llm'

logging:
  enable_wandb: false
  enable_summaries: true
  project_name: train_llm
  run_name: nil  # select random name
  run_description: nil
  log_dir: '_copy: /general/out_dir'
  log_filename: 'log.txt'
  allow_overwrite_log: true
  metrics_type: 'classification'

model:
  module: 'gptplay.models.nanogpt.get_model'
  module_kwargs:
    n_layer: 12
    n_embd: 768
    n_head: 12
    context_length: 1024
    # set bias to 0.0 for pre-training, 0.1+ for finetuning
    mlp_bias: false # pytorch default
    attn_proj_bias: false # for projection layers in attention
    attn_kv_bias: false # for kv in attention
    layer_norm_bias: false # pytorch default, not allowed to change
    attn_dropout: 0.0 # dropout for attention layer
    mlp_dropout: 0.0 # dropout for feedforward layer
    resid_dropout: 0.0 # dropout for residual connection
    embed_dropout: 0.0 # dropout for embedding layer

loss:
  module: 'gptplay.losses.autoregressive_loss.get_loss'

data:
  module: 'gptplay.data.tokenized_data.get_data'
  module_kwargs:
    dtype: 'uint16'
    train_batch_size: '_copy: /training/train_batch_size'
    eval_batch_size: 32 # 2^15=32768
    data_loader_seed: 8
    context_length: '_copy: /model/module_kwargs/context_length'
    tokenized_train_path: '$DATA_ROOT/tokenized/openwebtext/tiktoken/train.bin'
    tokenized_val_path: '$DATA_ROOT/tokenized/openwebtext/tiktoken/validation.bin'
    tokenized_test_path: null

tokenizer:
  module: 'gptplay.tokenizers.tiktoken_wrap.get_tokenizer_factory'
  module_kwargs:
    encoding_name: 'gpt2'

training:
  train_batch_size: 12
  num_steps: 600000    # for OpenWebText/9B tokens
  enable_train_log: false
  log_every: 20
  grad_clip: 1.0 # disabled if 0.0
  gradient_accumulation_steps: 40 # will be automatically divided by GPU count

optimizer:
  module: 'gptplay.optimizers.adamw_nanogpt.get_optim'
  module_kwargs:
    learning_rate: 6.0E-4
    weight_decay: 0.1
    beta1: 0.9
    beta2: 0.95
    eps: 1.0E-8 # pytorch default
    enable_fused: true # fused adamw kernel

scheduler:
  module: 'gptplay.schedulers.linear.get_scheduler'
  module_kwargs:
    warmup_iters: 2000
    lr_decay_iters: '_copy: /training/num_steps'
    min_lr: 6.0E-5

eval:
  eval_every: 1000
  eval_iters: 200 # number of samples to evaluate for dataset
  save_checkpoint: true
  checkoint_after: 2000 # starts saving checkpoint after these steps
  checkpoint_every: 10 # multiple of eval_every, save checkpoint after these steps from last checkpoint when val loss is better

