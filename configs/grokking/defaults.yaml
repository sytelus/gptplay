general:
  device_type: 'cuda'            # auto select if blank or cpu, cuda
  backend: 'nccl'       # nccl, gloo, mpi, horovod)
  dtype: 'float32'         # float32, float16, bfloat16
  torch_compile: false # because we are using Python 3.11
  seed: 42
  enable_distributed: false
  out_dir: '~/out_dir/grokking'

logging:
  enable_wandb: false
  project_name: grokking
  run_name: nil  # select random name
  run_description: nil
  log_dir: '~/out_dir/grokking'
  log_filename: 'log.txt'
  allow_overwrite_log: true
  metrics_type: 'classification'

model:
  module: 'gptplay.models.tiny_transformer.get_model'
  n_layer: 2
  n_embd: 128
  n_head: 4
  context_length: &context_length 5 # currently each input eq has [eos a op b =] which is 5 tokens
  # set bias to 0.0 for pre-training, 0.1+ for finetuning
  # PyTorch default for bias is true
  ffn_bias: true # pytorch default
  attn_proj_bias: true # for projection layers in attention
  attn_kv_bias: true # for kv in attention
  attn_dropout: 0.0 # dropout for attention layer
  ffn_dropout: 0.0 # dropout for feedforward layer

loss:
  module: 'gptplay.losses.grokking_loss.get_loss'

data:
  module: 'gptplay.datasets.grokking_data.get_data'
  operation: 'x/y'
  training_fraction: 0.5
  val_fraction: null # if null, use 1 - training_fraction, test fraction is 0
  train_batch_size: 512
  eval_batch_size: 32768 # 2^15=32768
  data_loader_seed: 8
  context_length: *context_length

tokenizer:
  module: 'gptplay.tokenizers.grokking_tokenizer.get_tokenizer'

training:
  num_steps: 3000    # 1e5 is not enough when weight_decay=0.0
  enable_train_log: false
  log_every: 20
  grad_clip: 0.0 # disabled if 0.0
  gradient_accumulation_steps: 1 # will be automatically divided by GPU count

optimizer:
  module: 'gptplay.optimizers.adam_w.get_optim'
  learning_rate: 1.0E-3
  weight_decay: 0.1     # weight_decay=1 makes convergence much faster and original graph is not reproducible
  beta1: 0.9
  beta2: 0.98
  eps: 1.0E-8 # pytorch default

scheduler:
  module: 'gptplay.schedulers.linear.get_scheduler'
  start_factor: 1.0E-8
  total_iters: 10

eval:
  eval_every: 100
  eval_iters: null # number of samples to evaluate for dataset
  save_checkpoint: false
  checkoint_after: 2000 # starts saving checkpoint after these steps
  checkpoint_every: 400 # multiple of eval_iters, save checkpoint after these steps from last checkpoint when val loss is better
