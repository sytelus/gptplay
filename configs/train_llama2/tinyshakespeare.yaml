__include__: ['base_config.yaml']

general:
  dtype: 'bfloat16'         # float32, float16, bfloat16
  out_dir: '$OUT_DIR/llama2_tinyshakespeare'

logging:
  enable_wandb: true
  project_name: 'tinyllama_shakespeare'
  run_name: tinyshakespeare_llama2_bf16  # select random name
  run_description: 'TinyLlama on TinyShakespeare'

model:
  module: 'nanugpt.models.tinyllama.get_model'
  module_kwargs:
    n_layer: 6
    n_embd: 384
    n_head: 6
    context_length: 512

data:
  module_kwargs:
    tokenized_train_path: '$DATA_ROOT/tokenized/tinyshakespeare/llama2/train.bin'
    tokenized_val_path: '$DATA_ROOT/tokenized/tinyshakespeare/llama2/val.bin'

training:
  device_batch_size: 32
  max_steps: 8000 # divide the number of steps by number of GPUs
  gradient_accumulation_steps: 2
  adj_grad_acc_gpu_count: false # adjust gradient accumulation steps for number of GPUs

optimizer:
  module: 'nanugpt.optimizers.adamw_nanogpt.get_optim'
  module_kwargs:
    learning_rate: 3.0E-4 # multiply LR by number of GPUs
    weight_decay: 0.1
    beta1: 0.9
    beta2: 0.99

scheduler:
  module: 'nanugpt.schedulers.nanogpt_cosine.get_scheduler'
  module_kwargs:
    warmup_iters: 100
    lr_decay_iters: '_copy: /training/max_steps'
    min_lr: 3.0E-5

eval:
  eval_every: 250
  eval_iters: 200 # number of samples to evaluate for dataset
  save_checkpoint: false
  checkoint_after: 0 # starts saving checkpoint after these steps
  checkpoint_every_hr: 1 # multiple of eval_every, save checkpoint after these steps from last checkpoint when val loss is better
  checkpoint_keep_best: false # keep only the best checkpoint, otherwise keep all with  _{step}.pt
